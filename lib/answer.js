"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getParams = _interopRequireDefault(require("./utils/get-params"));

var _movie = _interopRequireDefault(require("./services/movie"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const writeAnswer = (movieData, isAPISource) => {
  if (!isAPISource) {
    const answerText = `Hubo un problema con la API, pero igual te dejo una recomendaci칩n 游땕
'${movieData.title}'.
Estreno de ${movieData.release_date}.
Duraci칩n: ${movieData.runtime}.`;
    return answerText;
  } else {
    const answerText = `Hey, ac치 va una peli para vos 游땕
'${movieData.title} (${movieData.original_title})'.
Estreno del ${movieData.release_date}.
Duraci칩n: ${movieData.runtime}.`;
    return answerText;
  }
};

const writeErrorAnswer = error => {
  if (error === 'bad format') {
    const errorText = `Disculp치, puede que no hayas respetado el formato de petici칩n 游땐. Volv칠 a intentarlo y record치 que el formato es parametro:valor/parametro:valor`;
    return errorText;
  } else if (error === 'wrong param') {
    const errorText = 'Whoops, quiz치s tu petici칩n inclu칤a parametros no soportados. Ac치 te dejo una lista de los par치metros v치lidos para que vuelvas a intentarlo 游땕';
    return errorText;
  }
};

const buildAnswer = async tweetText => {
  const validRegExp = /^([A-z]{2,}\:[A-z\d]{2,}\/*){1,3}$/;

  if (!new RegExp(validRegExp).test(tweetText)) {
    return writeErrorAnswer('bad format');
  }

  try {
    const searchParams = (0, _getParams.default)(tweetText);
    const [movieData, isAPISource] = await (0, _movie.default)(searchParams);
    const tweetAnswer = writeAnswer(movieData, isAPISource);
    return tweetAnswer;
  } catch (error) {
    return writeErrorAnswer('wrong param');
  }
};

var _default = buildAnswer;
exports.default = _default;